/**
 * OMFG (Oh My Forking Git) - GitHub App for automated fork monitoring and synchronization
 * 
 * This is the main Probot app entrypoint that handles GitHub events and coordinates
 * fork synchronization activities.
 */

const { syncFork, loadConfig, validateConfig } = require('./syncFork');

/**
 * Main Probot app function
 * @param {import('probot').Probot} app - The Probot app instance
 */
module.exports = (app) => {
  app.log.info('OMFG GitHub App is starting up! ðŸš€');

  // Handle repository installation events
  app.on('installation.created', async (context) => {
    app.log.info(`OMFG installed on ${context.payload.installation.account.login}`);
  });

  // Handle push events
  app.on('push', async (context) => {
    try {
      const { repository, ref } = context.payload;
      
      // Only process pushes to main/master branches
      if (!ref.includes('refs/heads/main') && !ref.includes('refs/heads/master')) {
        return;
      }

      app.log.info(`Push event received for ${repository.full_name} on ${ref}`);

      // Load and validate configuration
      const config = await loadConfig(context);
      if (!config) {
        app.log.debug(`No .omfg.yml found in ${repository.full_name}, skipping`);
        return;
      }

      const validation = validateConfig(config);
      if (!validation.valid) {
        app.log.error(`Invalid configuration in ${repository.full_name}: ${validation.errors.join(', ')}`);
        return;
      }

      // Check if this is a fork and auto_sync is enabled
      if (repository.fork && config.auto_sync) {
        app.log.info(`Auto-sync enabled for fork ${repository.full_name}`);
        await syncFork(context, config);
      }
    } catch (error) {
      app.log.error('Error processing push event:', error);
    }
  });

  // Handle pull request events
  app.on('pull_request.opened', async (context) => {
    try {
      const { repository, pull_request } = context.payload;
      
      app.log.info(`Pull request opened in ${repository.full_name}: #${pull_request.number}`);

      // Load configuration to check if we should monitor this repo
      const config = await loadConfig(context);
      if (!config) {
        return;
      }

      // If this is a fork, we might want to check for conflicts with upstream
      if (repository.fork) {
        app.log.info(`Pull request in fork ${repository.full_name}, checking for upstream conflicts`);
        // TODO: Add conflict detection logic
      }
    } catch (error) {
      app.log.error('Error processing pull_request event:', error);
    }
  });

  // Handle fork events
  app.on('fork', async (context) => {
    try {
      const { repository, forkee } = context.payload;
      
      app.log.info(`Repository ${repository.full_name} was forked to ${forkee.full_name}`);

      // Create a comment or issue welcoming the new fork and explaining OMFG
      try {
        await context.octokit.issues.create({
          owner: forkee.owner.login,
          repo: forkee.name,
          title: 'ðŸŽ‰ Welcome to OMFG - Automated Fork Sync Setup',
          body: `Welcome to OMFG! ðŸŽ‰

This fork has been detected by the OMFG GitHub App. To enable automated synchronization with the upstream repository, please:

1. Create a \`.omfg.yml\` file in your repository root
2. Configure it based on the example below:

\`\`\`yaml
auto_sync: true
upstream: ${repository.full_name}
\`\`\`

Once configured, OMFG will automatically keep your fork synchronized with upstream changes!

For more information, visit: https://github.com/GooseyPrime/OMFG`
        });

        app.log.info(`Created welcome issue in ${forkee.full_name}`);
      } catch (issueError) {
        app.log.error(`Failed to create welcome issue in ${forkee.full_name}:`, issueError);
      }
    } catch (error) {
      app.log.error('Error processing fork event:', error);
    }
  });

  // Handle installation events for repositories
  app.on('installation_repositories.added', async (context) => {
    try {
      const { repositories_added, installation } = context.payload;
      
      app.log.info(`OMFG added to ${repositories_added.length} repositories by ${installation.account.login}`);

      for (const repo of repositories_added) {
        app.log.info(`Now monitoring ${repo.full_name}`);
      }
    } catch (error) {
      app.log.error('Error processing installation_repositories event:', error);
    }
  });

  // Health check endpoint
  app.route().get('/health', (req, res) => {
    res.json({
      status: 'ok',
      app: 'OMFG',
      message: 'Oh My Forking Git is running! ðŸš€'
    });
  });

  // Serve static files from the public directory
  const path = require('path');
  const fs = require('fs');
  const publicPath = path.join(__dirname, '..', 'public');
  
  // Get the express app instance
  const expressApp = app.route();
  
  // Serve static assets  
  expressApp.get('/assets/*', (req, res) => {
    const filePath = path.join(publicPath, req.path);
    
    // Check if file exists
    if (fs.existsSync(filePath)) {
      // Set appropriate content type for images
      if (filePath.endsWith('.png')) {
        res.setHeader('Content-Type', 'image/png');
      } else if (filePath.endsWith('.jpg') || filePath.endsWith('.jpeg')) {
        res.setHeader('Content-Type', 'image/jpeg');
      } else if (filePath.endsWith('.css')) {
        res.setHeader('Content-Type', 'text/css');
      } else if (filePath.endsWith('.js')) {
        res.setHeader('Content-Type', 'application/javascript');
      }
      
      res.sendFile(filePath);
    } else {
      res.status(404).send('File not found');
    }
  });
  
  // Serve the landing page at root for production use
  expressApp.get('/landing', (req, res) => {
    const indexPath = path.join(publicPath, 'index.html');
    if (fs.existsSync(indexPath)) {
      res.sendFile(indexPath);
    } else {
      res.status(404).send('Landing page not found');
    }
  });

  app.log.info('OMFG GitHub App is ready! ðŸŽ¯');
};